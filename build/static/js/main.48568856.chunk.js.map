{"version":3,"sources":["components/nameMaker.js","components/employee.js","components/empTable.js","App.js","serviceWorker.js","index.js"],"names":["makeName","chanceForTwoSyllables","chanceForFourSyllables","chanceForFiveSyllables","maxLength","syllable0","syllable1","returnString","syllables","makeSyllable","push","Math","random","syllable2","syllable3","syllable4","join","toLowerCase","length","substr","replace","split","forEach","item","indexOf","RegExp","toUpperCase","substring","middlePhoneme","chanceForInitialVowel","chanceForTerminalVowel","chanceForDiphthong","chanceForUncommonConsonant","chanceForCompoundConsonant","commonConsonants","uncommonConsonants","vowels","phonemes","firstPhoneme","randomConsonant","randomLetter","thirdPhoneme","letterList","floor","chanceForUncommon","commonList","uncommonList","pickList","nameMaker","makeGivenName","makeSurname","makeNumber","i","toString","makeComputerName","prefixList","suffixLength","separator","prefix","suffix","Employee","id","this","key","firstName","lastName","department","phoneNumber","computerName","officeNumber","managerName","lastFirstName","style","fontWeight","surname","departmentList","areaCode","lineNumber","makePhoneNumber","EmployeeTable","props","html","empList","toHTML_TableRow","padding","href","cursor","color","onClick","byNameSorter","byDeptSorter","byPhoneSorter","byOfficeSorter","byComputerSorter","setupApp","departments","computerNames","employees","newEmployee","generateName","generateDept","generatePhoneExtension","generateComputerName","generateOfficeNumber","returnSorted","arr","sortField","sortAsc","sort","a","b","App","state","sortBy","sortByName","event","newArr","preventDefault","sortValue","setState","sortByDept","sortByPhone","sortByOffice","sortByComputer","className","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.48568856.chunk.js","sourcesContent":["\n//      **      Declarations\n\nconst _CONSONANTS_COMMON_LIST = \"b,ch,d,f,g,h,j,jh,k,l,m,n,p,qu,r,s,sh,t,th,y\"\nconst _CONSONANTS_UNCOMMON_LIST = \"kh,qu,v,w,wh,x,z\";\nconst _CONSONANTS_INITIAL_RESTRICTIONS = \"x\";\nconst _CONSONANTS_TERMINAL_RESTRICTIONS = \"qu,wh\";\nconst _VOWELS_LIST = \"a,e,i,o,u\"\nconst _RESTRICTED_LETTER_COMBINATIONS = \"whw,bd,uu,shkh,mv,lj,hh\"\n\n//      Word Settings\nconst _GIVENNAME_TWOSYLLABLES = 0.4;\nconst _GIVENNAME_FOURSYLLABLES = 0.15;\nconst _GIVENNAME_FIVESYLLABLES = 0.02;\nconst _MAX_GIVENNAME_LENGTH = 8;\nconst _MAX_SURNAME_LENGTH = 10;\n\nconst _SURNAME_TWOSYLLABLES = 0.3;\nconst _SURNAME_FOURSYLLABLES = 0.3;\nconst _SURNAME_FIVESYLLABLES = 0.04;\n\n//      Syllable Settings\nconst _CHANCEFOR_UNCOMMON_CONSONANT = 0.25;\nconst _CHANCEFOR_INITIALVOWEL = 0.3;\nconst _CHANCEFOR_TERMINALVOWEL = 0.4;\nconst _CHANCEFOR_DIPHTHONG = 0.05;\nconst _CHANCEFOR_COMPOUNDCONSONANT = 0.15;\n\n\nconst nameMaker = {\n    //      **      Primary Functions\n\n    /**\n     * Generates a random given name using makeSyllable() according to the specified parameters\n     * @param {Number} chanceForTwoSyllables Percentage chance the name will only be two syllables long\n     * @param {Number} chanceForFourSyllables Percentage chance (cumulative) the name will have four syllables\n     * @param {Number} chanceForFiveSyllables Percentage chance (cumulative) the name will have five syllables\n     * @param {Number} maxLength Maximum character count before truncating name\n     */\n    makeGivenName: function(\n                chanceForTwoSyllables = _GIVENNAME_TWOSYLLABLES,\n                chanceForFourSyllables = _GIVENNAME_FOURSYLLABLES,\n                chanceForFiveSyllables = _GIVENNAME_FIVESYLLABLES,\n                maxLength = _MAX_GIVENNAME_LENGTH) {\n\n        return makeName(chanceForTwoSyllables, chanceForFourSyllables, chanceForFiveSyllables, maxLength);\n    },\n\n    /**\n     * Generates a random given name using makeSyllable() according to the specified parameters\n     * @param {Number} chanceForTwoSyllables Percentage chance the name will only be two syllables long\n     * @param {Number} chanceForFourSyllables Percentage chance (cumulative) the name will have four syllables\n     * @param {Number} chanceForFiveSyllables Percentage chance (cumulative) the name will have five syllables\n     * @param {Number} maxLength Maximum character count before truncating name\n     */\n    makeSurname: function(\n                chanceForTwoSyllables = _SURNAME_TWOSYLLABLES,\n                chanceForFourSyllables = _SURNAME_FOURSYLLABLES,\n                chanceForFiveSyllables = _SURNAME_FIVESYLLABLES,\n                maxLength = _MAX_SURNAME_LENGTH) {\n                    \n        return makeName(chanceForTwoSyllables, chanceForFourSyllables, chanceForFiveSyllables, maxLength);\n    }\n\n}\n\n//      **      Utility Functions\n\n\n/**\n * Generates a random given name using makeSyllable() according to the specified parameters\n * @param {Number} chanceForTwoSyllables Percentage chance the name will only be two syllables long\n * @param {Number} chanceForFourSyllables Percentage chance (cumulative) the name will have four syllables\n * @param {Number} chanceForFiveSyllables Percentage chance (cumulative) the name will have five syllables\n * @param {Number} maxLength Maximum character count before truncating name\n */\nfunction makeName(chanceForTwoSyllables, chanceForFourSyllables, chanceForFiveSyllables, maxLength) {\n    let returnString = \"\";\n    let syllables = []; \n    let syllable0, syllable1;\n\n    syllable0 = makeSyllable();\n    syllables.push(syllable0);\n\n    syllable1 = makeSyllable();\n    syllables.push(syllable1);\n\n    if (Math.random() > chanceForTwoSyllables) {\n    let syllable2 = makeSyllable();\n    syllables.push(syllable2);\n\n        if (Math.random() <= chanceForFourSyllables) {\n            let syllable3 = makeSyllable();\n            syllables.push(syllable3);\n\n            if (Math.random() <= chanceForFiveSyllables) {\n                let syllable4 = makeSyllable();\n                syllables.push(syllable4);\n            }\n        }\n    }\n\n    returnString = syllables.join(\"\").toLowerCase();\n    if (returnString.length > maxLength) {\n        returnString = returnString.substr(0, maxLength);\n    }\n    _RESTRICTED_LETTER_COMBINATIONS.replace(/ /g,\"\").split(\",\").forEach(item => {\n        if (returnString.indexOf(item) > -1) {\n            returnString = returnString.replace(RegExp(item, \"gi\"), item[0]);\n        }\n    });\n    return returnString[0].toUpperCase() + returnString.substring(1);\n}\n\n/**\n * Generates a random syllable from _CONSONANTS_LIST and _VOWELS_LIST using the specified parameters\n * @param {Number} chanceForInitialVowel Percentage chance that the syllable will start with a vowel\n * @param {Number} chanceForTerminalVowel Percentage chance that the syllable will end with a vowel\n * @param {Number} chanceForDiphthong Percentage chance the vowel will be a diphthong\n * @param {Number} chanceForUncommonConsonant Percent chance for a random uncommon consonant\n * @param {Number} chanceForCompoundConsonant Percent chance either consonant will be a compound\n */\nfunction makeSyllable(\n            chanceForInitialVowel = _CHANCEFOR_INITIALVOWEL, \n            chanceForTerminalVowel = _CHANCEFOR_TERMINALVOWEL,\n            chanceForDiphthong = _CHANCEFOR_DIPHTHONG,\n            chanceForUncommonConsonant = _CHANCEFOR_UNCOMMON_CONSONANT,\n            chanceForCompoundConsonant = _CHANCEFOR_COMPOUNDCONSONANT\n            ) {\n    //  Basic Syllable Theory:\n    //      In English, a syllable is made up of (potentially) an initial consonant or compound consonant,\n    //      a vowel or diphthong, and a terminal consonant or compound. This forms a single phonetic phrase\n    //      that forms a single component in a word or name.\n    //  \n    //      We're going to construct our random syllable just like that.\n                \n    const commonConsonants = _CONSONANTS_COMMON_LIST.replace(/ /g,\"\").split(\",\");\n    const uncommonConsonants = _CONSONANTS_UNCOMMON_LIST.replace(/ /g,\"\").split(\",\");\n    const vowels = _VOWELS_LIST.replace(/ /g,\"\").split(\",\");\n\n    let phonemes = [];\n    let middlePhoneme;\n\n    if (Math.random() > chanceForInitialVowel) {\n        let firstPhoneme;\n        do {\n            firstPhoneme = randomConsonant(chanceForUncommonConsonant, commonConsonants, uncommonConsonants);\n        } while (_CONSONANTS_INITIAL_RESTRICTIONS.indexOf(firstPhoneme) > -1);\n\n        if (Math.random() <= chanceForCompoundConsonant && \n                commonConsonants.indexOf(firstPhoneme) > -1 &&\n                firstPhoneme.length < 2) {\n            //  Don't compound if the selected consonant shows up in the common list.\n            //      This helps avoid dubbilexes unless we want them.\n            //  Also, not if the selected consonant is already compound. Because 'achshthwhe' is hard to read.\n            firstPhoneme += randomLetter(commonConsonants);\n        }\n        phonemes.push(firstPhoneme);\n    }\n\n    middlePhoneme = randomLetter(vowels);\n    if (Math.random() <= chanceForDiphthong) {\n        middlePhoneme += randomLetter(vowels);\n    }\n    phonemes.push(middlePhoneme);\n\n    if (Math.random() > chanceForTerminalVowel) {\n        let thirdPhoneme;\n        do {\n            thirdPhoneme = randomConsonant(chanceForUncommonConsonant, commonConsonants, uncommonConsonants);\n        } while (_CONSONANTS_TERMINAL_RESTRICTIONS.indexOf(thirdPhoneme) > -1);\n\n        if (Math.random() <= chanceForCompoundConsonant && \n                commonConsonants.indexOf(thirdPhoneme) > -1 &&\n                thirdPhoneme.length < 2) {\n            //  As above.\n            thirdPhoneme += randomLetter(commonConsonants);\n        }\n        phonemes.push(thirdPhoneme);\n    }\n\n    return phonemes.join(\"\");\n}\n\n/**\n * Selects a random element from given list\n * @param {Array} letterList Array of letters from which to choose\n */\nfunction randomLetter(letterList) {\n    return letterList[Math.floor(Math.random() * letterList.length)];\n}\n\n/**\n * Selects a random element from either a common list or an uncommon one, based on a random chance\n * @param {Number} chanceForUncommon Percentile Probability of drawing from uncommon array\n * @param {Array} commonList Standard pick array\n * @param {Array} uncommonList Uncommon Array to use on weighted chance\n */\nfunction randomConsonant(chanceForUncommon, commonList, uncommonList) {\n    let pickList = commonList;\n    if (Math.random() <= chanceForUncommon) {\n        pickList = uncommonList;\n    }\n    return pickList[Math.floor(Math.random() * pickList.length)];\n}\n\n\n//\n\nexport default nameMaker;\n\n","import React from \"react\";\nimport nameMaker from \"./nameMaker\";\n\nclass Employee {\n    constructor(id) {\n        this.key = id;\n        this.firstName = nameMaker.makeGivenName();\n        this.lastName = nameMaker.makeSurname();\n        this.department = \"\";\n        this.phoneNumber = \"\";\n        this.computerName = \"\";\n        this.officeNumber = \"\";\n        this.managerName = \"\";\n    }\n\n    fullName() {\n        return this.firstName + \" \" + this.lastName;\n    }\n\n    lastFirstName() {\n        return this.lastName + \", \" + this.firstName;\n    }\n\n    initials() {\n        return this.firstName[0] + \" \" + this.lastName[0];\n    }\n\n    toHTML() {\n        return (\n            <div key={this.key}>\n                <p>{this.lastFirstName()}</p>\n                <ul>\n                    <li><span style={{ fontWeight: 200 }}>Department:</span> {this.department}</li>\n                    <li><span style={{ fontWeight: 200 }}>Manager:</span> {this.managerName}</li>\n                    <li><span style={{ fontWeight: 200 }}>Phone:</span> {this.phoneNumber}</li>\n                    <li><span style={{ fontWeight: 200 }}>Office Number:</span> {this.officeNumber}</li>\n                    <li><span style={{ fontWeight: 200 }}>Computer:</span> {this.computerName}</li>\n                </ul>\n            </div>\n        );\n    }\n\n    toHTML_TableRow() {\n        return (\n            <tr key={this.key}>\n                <td>{this.lastFirstName()}</td>\n                <td>{this.department}</td>\n                <td>{this.phoneNumber}</td>\n                <td>{this.officeNumber}</td>\n                <td>{this.computerName}</td>\n            </tr>\n        )\n    }\n\n    generateName() {\n        this.firstName = nameMaker.makeGivenName();\n        this.surname = nameMaker.makeSurname();\n        return true;\n    }\n\n    generateDept(departmentList) {\n        if (departmentList) {\n            this.department = departmentList[Math.floor(Math.random() * departmentList.length)];\n        }\n    }\n\n    generatePhoneNumber(areaCode, prefix, lineNumber) {\n        this.phoneNumber = makePhoneNumber(areaCode, prefix, lineNumber, \".\");\n    }\n\n    generatePhoneExtension(length) {\n        this.phoneNumber = makeNumber(length);\n    }\n\n    generateOfficeNumber(length, prefix = \"\", suffix = \"\") {\n        this.officeNumber = prefix + makeNumber(length) + suffix;\n    }\n\n    generateComputerName(prefixList, suffixLength, separator = \"_\") {\n        this.computerName = makeComputerName(prefixList, suffixLength, separator);\n    }\n}\n\nfunction makePhoneNumber(areaCode = \"\", prefix = \"\", lineNumber = \"\", separator = \"-\") {\n    //  Doesn't include the country code.\n    if (areaCode === \"\") {\n        areaCode = Math.floor(Math.random() * 1000).toString();\n    }\n    while (areaCode.length < 3) areaCode = \"0\" + areaCode;\n    areaCode = areaCode.substr(0, 3);\n\n    if (prefix === \"\") {\n        prefix = Math.floor(Math.random() * 1000).toString();\n    }\n    while (prefix.length < 3) prefix = \"0\" + prefix;\n    prefix = prefix.substr(0, 3);\n\n    if (lineNumber === \"\") {\n        lineNumber = Math.floor(Math.random() * 10000).toString();\n    }\n    while (lineNumber.length < 4) lineNumber = \"0\" + lineNumber;\n    lineNumber = lineNumber.substr(0, 4);\n\n    return areaCode + separator + prefix + separator + lineNumber;\n}\n\nfunction makeNumber(length) {\n    let returnString = \"\";\n    for (let i = 0; i < length; i++) {\n        returnString += Math.floor(Math.random() * 10).toString();\n    }\n    return returnString;\n}\n\nfunction makeComputerName(prefixList, suffixLength, separator = \"_\") {\n    let prefix = prefixList[Math.floor(Math.random() * prefixList.length)].toUpperCase();\n    let suffix = \"\";\n    for (let i = 0; i < suffixLength; i++) {\n        suffix += Math.floor(Math.random() * 10).toString();\n    }\n    return prefix + separator + suffix;\n}\n\n\nexport default Employee;\n","import React from \"react\";\n\nconst EmployeeTable = props => {\n    let html = [];\n    props.empList.forEach(item => {\n        html.push(item.toHTML_TableRow());\n    })\n    return (\n        <div>\n            <h1>Employees</h1>\n            <table>\n                <thead>\n                    <tr>\n                        <th style={{ padding: \"2px 5px\" }}>\n                            <a \n                                href=\"/sortby/name\"\n                                style={{ cursor: \"pointer\", color: \"#aaaaff\" }}\n                                onClick={props.byNameSorter}\n                            >\n                                Name\n                            </a>\n                        </th>\n                        <th style={{ padding: \"2px 5px\" }}>\n                            <a \n                                href=\"/sortby/dept\"\n                                style={{ cursor: \"pointer\", color: \"#aaaaff\" }}\n                                onClick={props.byDeptSorter}\n                            >\n                                Department\n                            </a>\n                        </th>\n                        <th style={{ padding: \"2px 10px\" }}>\n                            <a \n                                href=\"/sortby/phone\"\n                                style={{ cursor: \"pointer\", color: \"#aaaaff\" }}\n                                onClick={props.byPhoneSorter}\n                            >\n                                Phone\n                            </a>\n                        </th>\n                        <th style={{ padding: \"2px 10px\" }}>\n                            <a \n                                href=\"/sortby/office\"\n                                style={{ cursor: \"pointer\", color: \"#aaaaff\" }}\n                                onClick={props.byOfficeSorter}\n                            >\n                                Office\n                            </a>\n                        </th>\n                        <th style={{ padding: \"2px 5px\" }}>\n                            <a \n                                href=\"/sortby/computer\"\n                                style={{ cursor: \"pointer\", color: \"#aaaaff\" }}\n                                onClick={props.byComputerSorter}\n                            >\n                                Computer\n                            </a>\n                        </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {html}\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nexport default EmployeeTable;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Employee from \"./components/employee\";\nimport EmployeeTable from \"./components/empTable\";\n\nclass App extends React.Component {\n  state = {\n    employees: setupApp(),\n    sortBy: \"\"\n  }\n\n  sortByName = event => {\n    event.preventDefault();\n\n    let newArr;\n    let sortValue = (this.state.sortBy !== \"NAME ASC\") ? \"NAME ASC\" : \"NAME DESC\";\n\n    if (this.state.sortBy !== \"NAME ASC\") {\n      newArr = this.state.employees.sort((a, b) => a.lastFirstName() > b.lastFirstName() ? 1 : a.lastFirstName() === b.lastFirstName() ? 0 : -1);\n    } else {\n      newArr = this.state.employees.sort((a, b) => a.lastFirstName() > b.lastFirstName() ? -1 : a.lastFirstName() === b.lastFirstName() ? 0 : 1);\n    }\n    this.setState({ employees: newArr, sortBy: sortValue });\n  }\n\n  sortByDept = event => {\n    event.preventDefault();\n    let newArr = returnSorted(this.state.employees, \"department\", (this.state.sortBy !== \"DEPT ASC\"));\n    let sortValue = (this.state.sortBy !== \"DEPT ASC\") ? \"DEPT ASC\" : \"DEPT DESC\";\n    this.setState({ employees: newArr, sortBy: sortValue });\n  }\n\n  sortByPhone = event => {\n    event.preventDefault();\n    let newArr = returnSorted(this.state.employees, \"phoneNumber\", (this.state.sortBy !== \"PHONE ASC\"));\n    let sortValue = (this.state.sortBy !== \"PHONE ASC\") ? \"PHONE ASC\" : \"PHONE DESC\";\n    this.setState({ employees: newArr, sortBy: sortValue });\n  }\n\n  sortByOffice = event => {\n    event.preventDefault();\n    let newArr = returnSorted(this.state.employees, \"officeNumber\", (this.state.sortBy !== \"OFFICE ASC\"));\n    let sortValue = (this.state.sortBy !== \"OFFICE ASC\") ? \"OFFICE ASC\" : \"OFFICE DESC\";\n    this.setState({ employees: newArr, sortBy: sortValue });\n  }\n\n  sortByComputer = event => {\n    event.preventDefault();\n    let newArr = returnSorted(this.state.employees, \"computerName\", (this.state.sortBy !== \"COMPUTER ASC\"));\n    let sortValue = (this.state.sortBy !== \"COMPUTER ASC\") ? \"COMPUTER ASC\" : \"COMPUTER DESC\";\n    this.setState({ employees: newArr, sortBy: sortValue });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n\n          {EmployeeTable({ \n            empList: this.state.employees,\n            byNameSorter: this.sortByName,\n            byComputerSorter: this.sortByComputer,\n            byDeptSorter: this.sortByDept,\n            byOfficeSorter: this.sortByOffice,\n            byPhoneSorter: this.sortByPhone\n            })}\n\n        </header>\n      </div>\n    );\n  }\n}\n\n/**\n * Populates the employee list\n */\nfunction setupApp() {\n  let maxEmployee = 10;\n  let departments = [\"Command\", \"Marine Command\", \"Security\", \"Medical\", \"Engineering & Maintenance\"]\n  let computerNames = [\"black\",\"blue\",\"green\",\"cyan\",\"red\",\"purple\",\"orange\",\n        \"lgrey\",\"grey\",\"lblue\",\"lgreen\",\"lcyan\",\"lred\",\"lpurple\",\"yellow\",\"white\"]\n  let employees = [];\n\n  for (let i = 0; i < maxEmployee; i++) {\n    let newEmployee = new Employee(i);\n\n    newEmployee.generateName();\n    newEmployee.generateDept(departments);\n    newEmployee.generatePhoneExtension(4);\n    newEmployee.generateComputerName(computerNames, 4, \"_\");\n    newEmployee.generateOfficeNumber(2, \"1\", \"ABCD\"[Math.floor(Math.random() * 4)]);\n\n    employees.push(newEmployee);\n  }\n\n  return employees;\n}\n\n/**\n * Sorts array on basic field name, ascending or descending\n * @param {Array} arr Array to Sort\n * @param {Text} sortField Field on which to sort array\n * @param {Boolean} sortAsc If TRUE, sort the array in ascending order. If FALSE, use descending order.\n */\nfunction returnSorted(arr, sortField, sortAsc) {\n  let newArr;\n  if (sortAsc) {\n    newArr = arr.sort((a, b) => a[sortField] > b[sortField] ? 1 : a[sortField] === b[sortField] ? 0 : -1);\n  } else {\n    newArr = arr.sort((a, b) => a[sortField] > b[sortField] ? -1 : a[sortField] === b[sortField] ? 0 : 1);\n  }\n  return newArr;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}